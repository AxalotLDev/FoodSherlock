import os
import logging
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import CommandHandler, MessageHandler, filters, ContextTypes, ApplicationBuilder
from ultralytics import YOLO
from deep_translator import GoogleTranslator

load_dotenv()
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)


def run_inference(image_path, img_size=1024, conf_threshold=0.1):
    results = model.predict(image_path, imgsz=img_size, conf=conf_threshold)
    for result in results:
        idx = result.probs.top1
        predicted = result.names[idx]
        return predicted
    return None

## TODO –°–¥–µ–ª–∞—Ç—å –º–µ–Ω—é –¥–ª—è –∫–Ω–æ–ø–æ–∫
start_markup = ReplyKeyboardMarkup(
    [
        [KeyboardButton("/start")],
        [KeyboardButton("/contacts")]
    ],
    resize_keyboard=True
)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –±–ª—é–¥ –Ω–∞ —Ñ–æ—Ç–æ.\n\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª—é–¥–∞, —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–≥–æ.\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´/contacts¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –º–µ–Ω—è —Å–¥–µ–ª–∞–ª."
    )
    await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=start_markup
    )


async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    creators = (
        "üë®‚Äçüíª –ê–≤—Ç–æ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:\n"
        "‚Äî –ê–±–∑–∞–ª–æ–≤ –≠–¥—É–∞—Ä–¥ –†—É—Å–ª–∞–Ω–æ–≤–∏—á\n"
        "‚Äî –í–ª–∞—Å–æ–≤ –õ–µ–æ–Ω–∏–¥ –î–º–∏—Ç—Ä–∏–µ–≤–∏—á\n"
        "‚Äî –î–º–∏—Ç—Ä–∏–µ–Ω–∫–æ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω\n"
        "‚Äî –õ–∞–¥—ã–≥–∏–Ω –ù–∏–∫–∏—Ç–∞ –°–µ—Ä–≥–µ–µ–≤–∏—á"
    )
    await context.bot.send_message(chat_id=chat_id, text=creators)


async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message.photo:
        await update.message.reply_text("‚ùó –≠—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞.")
        return

    photo = update.message.photo[-1]
    file = await photo.get_file()
    path = f"./downloads/{file.file_id}.jpg"
    os.makedirs(os.path.dirname(path), exist_ok=True)

    try:
        await file.download_to_drive(path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    result = run_inference(path)
    if result:
        if result == "none":
            await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")
        translated = GoogleTranslator(source='auto', target='ru').translate(result)
        translated = translated.capitalize()
        await update.message.reply_text(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ: *{translated}*", parse_mode="Markdown")
    else:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")

    try:
        os.remove(path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")


async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ.",
        reply_markup=start_markup
    )


if __name__ == "__main__":
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    MODEL_PATH = os.getenv("MODEL_PATH")
    if not TOKEN:
        raise ValueError("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    if not MODEL_PATH:
        raise ValueError("–ü—É—Ç—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–¥–µ–ª–∏ YOLO –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    model = YOLO(MODEL_PATH)
    app = ApplicationBuilder().token(TOKEN).read_timeout(9999).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("contacts", contacts))
    app.add_handler(MessageHandler(filters.PHOTO, handle_image))
    app.add_handler(MessageHandler(filters.COMMAND, unknown))

    try:
        app.run_polling()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
