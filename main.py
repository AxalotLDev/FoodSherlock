import logging
import os
import csv
from dotenv import load_dotenv
from telegram import Update, BotCommand
from telegram.constants import ParseMode
from telegram.ext import CommandHandler, MessageHandler, filters, ContextTypes, ApplicationBuilder
from ultralytics import YOLO

load_dotenv()
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)

translation_path = os.getenv("TRANSLATION_CSV") or "translations.csv"
if not os.path.isfile(translation_path):
    raise FileNotFoundError(f"–§–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {translation_path}")
translations = {}
with open(translation_path, encoding='utf-8-sig') as f:
    reader = csv.DictReader(f)
    for row in reader:
        key = row.get('English')
        val = row.get('Russian')
        if key and val:
            translations[key.strip()] = val.strip()

calories_path = os.getenv("CALORIES_CSV") or "calories.csv"
if not os.path.isfile(calories_path):
    raise FileNotFoundError(f"–§–∞–π–ª –∫–∞–ª–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {calories_path}")
calories_data = {}
with open(calories_path, encoding='utf-8') as f:
    reader = csv.DictReader(f)
    for row in reader:
        name = row.get('name', '').strip()
        cal = row.get('calories, 100 gm', '').strip()
        if name and cal:
            calories_data[name] = cal

recipes_path = os.getenv("RECIPES_CSV") or "recipes.csv"
if not os.path.isfile(recipes_path):
    raise FileNotFoundError(f"–§–∞–π–ª –∫–∞–ª–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {recipes_path}")
recipes_data = {}
with open(recipes_path, encoding='utf-8') as f:
    reader = csv.DictReader(f)
    for row in reader:
        name = row.get('name', '').strip()
        cal = row.get('recipes', '').strip()
        if name and cal:
            recipes_data[name] = cal

def run_inference(image_path: str, conf_threshold: float = 0.1):
    results = model.predict(image_path, conf=conf_threshold)
    for result in results:
        if result.probs is not None:
            probs_array = result.probs.data.cpu().numpy()
            idx = probs_array.argmax()
            label = result.names[idx]
            confidence = float(probs_array[idx])
            return label, confidence
    return None, 0.0


commands = [
    BotCommand("start", "üçî –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    BotCommand("creators", "üìå –û —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö"),
]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="üçî *–ü—Ä–∏–≤–µ—Ç, –≥—É—Ä–º–∞–Ω! –Ø ‚Äì FoodSherlock, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤ –∫–∞–ª–æ—Ä–∏–π!*\n\nüîç –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –±–ª—é–¥–∞, –∏ —è:\n‚úÖ –û–ø—Ä–µ–¥–µ–ª—é, —á—Ç–æ –∑–∞ –µ–¥–∞ –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π\n‚úÖ –†–∞—Å—Å–∫–∞–∂—É –µ—ë –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å\n\n*–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –≤ —Ç–≤–æ–µ–π —Ç–∞—Ä–µ–ª–∫–µ? –ü—Ä–æ—Å—Ç–æ —Å—Ñ–æ—Ç–∫–∞–π –∏ –∂–º–∏ \"–û—Ç–ø—Ä–∞–≤–∏—Ç—å\"!*\n\nüìå P.S. –ù–∞–∂–º–∏ /creators, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–æ–∑–¥–∞—Ç–µ–ª—è–º–∏ —ç—Ç–æ–≥–æ –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–≥–æ –≤–æ–ª—à–µ–±—Å—Ç–≤–∞ ‚ú®",
                                   parse_mode=ParseMode.MARKDOWN)


async def creators(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="üîç *–ö—Ç–æ —Å—Ç–æ–∏—Ç –∑–∞ FoodSherlock?*\n\n–ù–∞—à –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤ —Å–æ–∑–¥–∞–Ω —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π:\n\n‚Ä¢ *–≠–¥—É–∞—Ä–¥ –ê–±–∑–∞–ª–æ–≤* ‚Äì –ú–∞—Å—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ *–õ–µ–æ–Ω–∏–¥ –í–ª–∞—Å–æ–≤* ‚Äì –ö–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã & –î–∏–∑–∞–π–Ω–µ—Ä\n‚Ä¢ *–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –î–º–∏—Ç—Ä–∏–µ–Ω–∫–æ* ‚Äì –ê–Ω–∞–ª–∏—Ç–∏–∫\n‚Ä¢ *–ù–∏–∫–∏—Ç–∞ –õ–∞–¥—ã–≥–∏–Ω* ‚Äì –í–æ–ª—à–µ–±–Ω–∏–∫ –±—ç–∫–µ–Ω–¥–∞\n\n*–≠—Ç–æ—Ç dream team —Å–æ–µ–¥–∏–Ω–∏–ª —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ª—é–±–æ–≤—å –∫ –µ–¥–µ!* üöÄ",
                                   parse_mode=ParseMode.MARKDOWN)


async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message.photo:
        await update.message.reply_text("‚ùó –≠—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞.")
        return
    photo = update.message.photo[-1]
    file = await photo.get_file()
    path = f"./downloads/{file.file_id}.jpg"
    os.makedirs(os.path.dirname(path), exist_ok=True)
    await file.download_to_drive(path)
    label, confidence = run_inference(path)
    if label:
        if label == "none":
            await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")
        else:
            russian = translations.get(label, label).capitalize()
            percent = round(confidence * 100, 2)
            cal = calories_data.get(label)
            recipe = recipes_data.get(label)
            text = f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ: *{russian}* \nüìù –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: *{percent}%*"
            if cal:
                text += f"\nüî• –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (100 –≥): *{cal}*"
            if recipe:
                text += f"\nüìî –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç: *{recipe}*"
            os.remove(path)
            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    else:
        os.remove(path)
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")


async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ.")


async def post_init(application: ApplicationBuilder) -> None:
    await application.bot.set_my_commands(commands)


if __name__ == "__main__":
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    MODEL_PATH = os.getenv("MODEL_PATH")
    if not TOKEN:
        raise ValueError("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    if not MODEL_PATH:
        raise ValueError("–ü—É—Ç—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–¥–µ–ª–∏ YOLO –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    model = YOLO(MODEL_PATH)
    app = ApplicationBuilder().token(TOKEN).post_init(post_init).read_timeout(9999).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("creators", creators))
    app.add_handler(MessageHandler(filters.PHOTO, handle_image))
    app.add_handler(MessageHandler(filters.COMMAND, unknown))
    app.run_polling()
